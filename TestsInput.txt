PROGRAM PrimerPrograma : DIM var1 of double ; BEGIN OUTPUT var1 ; END
PROGRAM PrimerPrograma : DIM var1 of double ; DIM i , j of word ; DIM varDouble of double ; SUB PROCEDURE suma : BEGIN LET i := 0 ; LET j := var1 ; # comentario # RETURN ; BEGIN INPUT var1 , VAR2 ; OUTPUT " ESTO " ; GOSUB rutina ; END
PROGRAM PrimerPrograma : DIM var1 of double ; DIM i , j of double; SUB PROCEDURE suma : BEGIN LET i := 0 ; LET j := var1 ; RETURN ; BEGIN OUTPUT var1 ; END
PROGRAM PrimerPrograma : DIM var1 of double ; BEGIN WHILE ( ( 1 OR 5 ) > ( 10 OR 15 ) ) INPUT var1 ; WEND ; END
PROGRAM PrimerPrograma : DIM var1 of double ; BEGIN FOR ( ; ; ) INPUT var1 ; NEXT ; END
PROGRAM PrimerPrograma : DIM var1 of double ; BEGIN DO INPUT var1 ; LOOP ( ) ; END
PROGRAM PrimerPrograma : DIM var1 of double ; BEGIN IF ( ) THEN INPUT var1 ; ENDIF ; END
PROGRAM PrimerPrograma : DIM var1 of double ; BEGIN IF ( ) THEN INPUT var1 ; ELSE INPUT var1 ; ENDIF ; END
PROGRAM PrimerPrograma : DIM var1 of double ; BEGIN LET var1 [ 5 , 10 ]:= ( 1 OR 5 ) > ( 10 OR 15 ) ; END
PROGRAM PrimerPrograma : DIM var1 of double ; BEGIN LET var1 [ 5 , 10 ]:= ( 1 OR 5 ) > ( 10 AND 15 ) ; END

PROGRAM PrimerPrograma : DIM var1 , var2 , var3 of double ; BEGIN LET var1 := var2 OR 100 ; END
PROGRAM PrimerPrograma : DIM var1 , var2 , var3 of double ; BEGIN LET var1 := var2 > 100 ; END
PROGRAM PrimerPrograma : DIM var1 , var2 , var3 of double ; BEGIN IF ( var1 > var2 ) THEN LET var3 := var1 + var2 ; ENDIF ; END
PROGRAM PrimerPrograma : DIM var1 , var2 , var3 of double ; BEGIN IF ( var1 > var2 ) THEN LET var3 := var1 + var2 ; ELSE LET var3 := var1 - var2 ; ENDIF ; END
PROGRAM PrimerPrograma : DIM var1 , var2 , var3 of double ; BEGIN DO LET var1 := 5 ; LOOP ( var3 > var2 ) ; END
PROGRAM PrimerPrograma : DIM var1 , var2 , var3 of double ; BEGIN WHILE ( var3 > var2 ) LET var1 := 5 ; WEND ; END
PROGRAM PrimerPrograma : DIM var1 , var2 , var3 of double ; BEGIN FOR ( LET var1 := 1 ; var1 < var3 ; LET var1 := var1 + 1 ) LET var3 := var1 + var2 ; NEXT ; END

PROGRAM PrimerPrograma : DIM i, j, k, a of double ; BEGIN LET K := 5 ; FOR ( LET i := 1 ; i < 10 ; LET i := i + 3 ) FOR ( LET j := i ; j < k ; LET j := j + 1 ) LET a := a + j ; NEXT ; NEXT ; END



PROGRAM PrimerPrograma : DIM a,b,c,d of double ; BEGIN LET a := 2 ; LET b := a; END
PROGRAM PrimerPrograma : DIM a,b,c,d of double ; BEGIN LET a := 2 ; LET b := 1; LET c := a < b ; END
PROGRAM PrimerPrograma : DIM i, j, k, a of word; BEGIN LET k := 5 ; LET a := 0 ; FOR ( LET i := 1 ; i < 10 ; LET i := i + 1 ) LET a := a + k ; NEXT ; END
PROGRAM PrimerPrograma : DIM i, j, k, a of word; BEGIN LET k := 5 ; LET a := 0 ; WHILE ( a < k ) LET a := a + 1 ; WEND ; END
PROGRAM PrimerPrograma : DIM i, j, k, a of word; BEGIN LET k := 5 ; LET a := 0 ; DO LET a := a + 1  ; LOOP ( a < k ) ; END
PROGRAM PrimerPrograma : DIM i, j, k, a of word; BEGIN LET k := 5 ; LET a := 0 ; IF ( a > k) THEN LET i := 0 ; ELSE LET i := 1 ; ENDIF ; END


PROGRAM PrimerPrograma : DIM var1 , var2 , var3 of matrix size [ 5 , 5 ] ; BEGIN WHILE ( var3 > var2 ) LET var1 := 5 ; WEND ; END

PROGRAM PrimerPrograma : DIM a of word ; DIM var1 , var2 , var3 of matrix size [ 5 ] ; DIM var1 , var2 , var3 of matrix size [ 5 , 5 ] ;  DIM b of double; BEGIN WHILE ( var3 > var2 ) LET var1 := 5 ; WEND ; END

PROGRAM PrimerPrograma : DIM var1 , var2 , var3 of matrix size [ 5 ] ; BEGIN var1 [ 1 ] := var [ 2 ] ; END

PROGRAM PrimerPrograma : DIM a of word ; DIM var1 of matrix size [ 5 ] ; DIM var4 of matrix size [ 5 , 5 ] ;  DIM b of double; BEGIN LET var1[0] := var4[0,0] ; END

PROGRAM PrimerPrograma : DIM a of word ; DIM var1 of matrix size [ 5 ] ; DIM b of double; BEGIN LET b := 1 ; LET var1[0] := b ; END








#######################
data = '( PROGRAM PrimerPrograma : DIM var1 of double ; BEGIN OUTPUT var1 ; END )'
lexer.input(data)


while True:
    tok = lexer.token()
    if not tok: 
        break      # No more input
    print(tok)


while True:
   try:
       prueba = input('Frase: ')
   except EOFError:
       break
   if not prueba: continue
   parser.parse(prueba)


def t_id(t):
    r'[a-zA-Z_][a-zA-Z_0-9]*'
    t.type = reserved.get(t.value,'ID') # Check for reserved words
    return t